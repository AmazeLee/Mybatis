<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.sh.mybatis.mapper.UserMapper">
	
	<!-- 创建sql片段 -->
	<sql id="selectUser">
		select * from user
	</sql>

	<!-- 通过id查询一个用户 -->
	<select id="findUserById" parameterType="Integer" resultType="User">
		select * from user where id = #{v}
	</select>

	<!-- 根据用户名称查询用列表 -->
	<!-- #{} select * from user where id = ? 占位符 ? == '王五' ${} select * from 
		user where usrename like 字符串拼接 -->
	<select id="findUserByUsername" parameterType="String"
		resultType="com.sh.mybatis.pojo.User">
		<!-- select * from user where username like '%${value}%' -->
		select * from user where username like "%"#{haha}"%"
	</select>

	<!-- 添加用户 -->
	<insert id="insertUser" parameterType="com.sh.mybatis.pojo.User">
		<!-- 获得最新id并添加到id字段 -->
		<selectKey keyProperty="id" resultType="Integer" order="AFTER">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user (username,birthday,address,sex) values
		(#{username},#{birthday},#{address},#{sex})
	</insert>

	<!-- 更新用户 -->
	<update id="updateUserById" parameterType="com.sh.mybatis.pojo.User">
		update user set
		username = #{username},sex = #{sex},birthday = #{birthday},address =
		#{address} where id = #{id}
	</update>

	<!-- 删除用户 -->
	<delete id="deleteUserById" parameterType="Integer">
		delete from user where
		id = #{v}
	</delete>

	<!-- 根据用户名模糊查询 -->
	<select id="findUserByQueryVo" parameterType="QueryVo"
		resultType="com.sh.mybatis.pojo.User">
		select * from user where username like
		"%"#{user.username}"%"
	</select>

	<!-- 查询数据条数 -->
	<select id="countUser" resultType="Integer">
		select count(1) from user
	</select>

	<!-- 根据性别和用户名查询用户 -->
	<select id="selectUserBySexAndUsername" parameterType="User"
		resultType="User">
		<!-- 引入sql片段 -->
		<include refid="selectUser"></include>
		<!-- where标签可以去掉第一个前and -->
		<where>
			<if test="sex != null and username != ''">
				sex = #{sex}
			</if>
			<if test="username != null and username != ''">
				and username = #{username}
			</if>
		</where>
	</select>
	
	<!-- 通过多个id查询用户 -->
	<select id="selectUserByIds" parameterType="QueryVo" resultType="User">
		<include refid="selectUser"></include>
		<where>
			<foreach collection="list" item="id" separator="," open="id in (" close=")">
				#{id}
			</foreach>
		</where>
	</select>
</mapper>